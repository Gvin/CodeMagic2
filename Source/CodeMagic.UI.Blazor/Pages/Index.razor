@page "/"
@using CodeMagic.UI.Blazor.Models
@using CodeMagic.UI.Blazor.Services
@using CodeMagic.UI.Presenters

<PageTitle>Code Magic 2</PageTitle>

@implements IDisposable

@inject IJSRuntime _jsRuntime;
@inject IWindowService _windowService;
@inject IApplicationController _applicationController;
@inject ILogger<Index> _logger;

<div class="index-page">
	<div class="game-frame">
		<div class="wrapper">
			<div id="index-page-frame" class="frame">
				<p>╔═════════════════════════════════════════════════════════════════════════╗</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>║                                                                         ║</p>
				<p>╚═════════════════════════════════════════════════════════════════════════╝</p>					
			</div>
			
			<p id="size-check-element">&nbsp;</p>

			<div id="index-page-content" class="page-content-wrapper">
				<div>
					<ErrorBoundary>
						<ChildContent>
							@if (CurrentWindowModel != null)
							{
								@switch (CurrentWindowModel)
								{
									case MainMenuModel model:
										<MainMenu Model="model"/>
										break;
									case SettingsModel model:
										<Settings Model="model"/>
										break;
									default:
										throw new Exception($"Unknown window model: {CurrentWindowModel.GetType().Name}");
								}
							}
						</ChildContent>
						<ErrorContent>
							<div class="error-message">
								<p>Encountered some unexpected error.</p>
								<p>Please reload the page.</p>
								<p>See console for details.</p>
							</div>
						</ErrorContent>
					</ErrorBoundary>
				</div>
			</div>
		</div>
	</div>

</div>

@code {
	protected override void OnInitialized()
	{
		_windowService.WindowsChanged += WindowService_WindowsChanged;

		base.OnInitialized();
	}

	private void WindowService_WindowsChanged(object? sender, EventArgs? args)
	{
		StateHasChanged();
	}

	private IWindowModel? CurrentWindowModel
	{
		get 
		{
			return _windowService.GetCurrentWindow();
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await _jsRuntime.InvokeVoidAsync("setContentSize");
		await base.OnAfterRenderAsync(firstRender);
	}

	public void Dispose()
	{
		_windowService.WindowsChanged -= WindowService_WindowsChanged;
	}
}
