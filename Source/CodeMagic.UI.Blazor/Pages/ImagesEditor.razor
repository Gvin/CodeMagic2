@page "/imageseditor"

@using System.Drawing
@using CodeMagic.Game
@using CodeMagic.Game.Images
@using CodeMagic.UI.Blazor.Services
@using CodeMagic.UI.Blazor.Components
@using Newtonsoft.Json

@inject IDownloadFileService DownloadFileService;
@inject IImagesStorageService ImagesStorageService;

<h3>Images Editor</h3>

<div class="images-editor">
	<div class="panel">
		Width: <input type="text" placeholder="Width" @bind="Width"/>
		Height: <input type="text" placeholder="Height" @bind="Height"/>
		<input type="button" value="Create" @onclick="HandleCreateImage"/>
	</div>
	
	<div class="panel">
		<input type="button" value="Download" @onclick="HandleDownloadClick"/>
		<InputFile OnChange="LoadImage" AdditionalAttributes="@ImageLoadAttributes"></InputFile>
	</div>

	<div class="panel">
		<input type="text" @bind="Text"/>
		<input type="button" value="Clear Symbol" @onclick="HandleClearSymbol"/>
		<input type="color" placeholder="Main Color" @bind="MainColor"/>
		<input type="button" value="Clear Main Color" @onclick="HandleClearMainColor"/>
		<input type="color" placeholder="Background Color" @bind="BackgroundColor"/>
		<input type="button" value="Clear Background Color" @onclick="HandleClearBackgroundColor"/>
	</div>

	<div class="panel drawing-area">
		@for (var y = 0; y < Image.Height; y++)
		{
			<div class="pixels-row">
				@for (var x = 0; x < Image.Width; x++)
				{
					var xValue = x;
					var yValue = y;
					<div class="pixel" @onclick="() => HandlePixelClick(xValue, yValue)"><p style="color: @GetColor(Image[x,y]); background-color: @GetBackgroundColor(Image[x,y])">@GetSymbol(Image[x, y])</p></div>
				}
			</div>
		}
	</div>
	
	<div class="panel">
		Default background:
		<div @onclick="HandleSetBackgroundStoneFloor">
			<SymbolsImageDisplay Model="StoneFloorImage"></SymbolsImageDisplay>
		</div>
	</div>
</div>


@code {
	private static Dictionary<string, object> ImageLoadAttributes => new()
	{
		{ "accept", ".simg" }
	};

	private ISymbolsImage? BackgroundImage { get; set; }

	private ISymbolsImage StoneFloorImage => ImagesStorageService.GetImage("Objects_Floor_Stone_V1");

	private string? Text { get; set; }

	private char? DrawingChar => Text?.FirstOrDefault();

	private string? MainColor { get; set; }

	private Color? DrawingMainColor
	{
		get
		{
			if (string.IsNullOrEmpty(MainColor))
			{
				return null;
			}

			return ColorTranslator.FromHtml(MainColor);
		}
	}

	private string? BackgroundColor { get; set; }

	private Color? DrawingBackgroundColor
	{
		get
		{
			if (string.IsNullOrEmpty(BackgroundColor))
			{
				return null;
			}

			return ColorTranslator.FromHtml(BackgroundColor);
		}
	}

	private SymbolsImage Image { get; set; } = new(3, 3);

	private int Width { get; set; } = 3;

	private int Height { get; set; } = 3;

	private void HandleSetBackgroundStoneFloor(MouseEventArgs args)
	{
		BackgroundImage = StoneFloorImage;
	}

	private void HandleCreateImage(MouseEventArgs args)
	{
		Image = new SymbolsImage(Width, Height);
	}

	private void HandleClearMainColor(MouseEventArgs args)
	{
		MainColor = null;
	}

	private void HandleClearBackgroundColor(MouseEventArgs args)
	{
		BackgroundColor = null;
	}

	private void HandleClearSymbol(MouseEventArgs args)
	{
		Text = null;
	}

	private void HandlePixelClick(int x, int y)
	{
		Image[x, y].Symbol = DrawingChar;
		Image[x, y].Color = DrawingMainColor;
		Image[x, y].BackgroundColor = DrawingBackgroundColor;
		StateHasChanged();
	}

	private async void HandleDownloadClick(MouseEventArgs args)
	{
		var content = JsonConvert.SerializeObject(Image);
		await DownloadFileService.DownloadAsync("image.simg", content);
	}

	private async void LoadImage(InputFileChangeEventArgs args)
	{
		if (args.FileCount != 1)
		{
			return;
		}

		var imageFromFile = await ReadFile(args.File);
		if (imageFromFile != null)
		{
			Image = imageFromFile;
			StateHasChanged();
		}
	}

	private static async Task<SymbolsImage?> ReadFile(IBrowserFile file)
	{
		var content = await ReadFileContent(file);
		return JsonConvert.DeserializeObject<SymbolsImage>(content);
	}

	private static async Task<string> ReadFileContent(IBrowserFile file)
	{
		await using var fileStream = file.OpenReadStream();
		return await new StreamReader(fileStream).ReadToEndAsync();
	}

	private string GetSymbol(SymbolsImage.Pixel? pixel)
	{
		return pixel?.Symbol?.ToString() ?? " ";
	}

	private string GetColor(SymbolsImage.Pixel? pixel)
	{
		return (pixel?.Color).ToStyleString();
	}

	private string GetBackgroundColor(SymbolsImage.Pixel? pixel)
	{
		return (pixel?.BackgroundColor).ToStyleString();
	}
}
