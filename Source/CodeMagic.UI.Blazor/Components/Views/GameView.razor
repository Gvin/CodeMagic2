@using CodeMagic.UI.Blazor.Models
@using CodeMagic.Core.Area
@using CodeMagic.Game.Images
@using System.Drawing
@using CodeMagic.UI.Blazor.Drawing

@inject ICellImageService CellImageService;

<div class="game-view">
	<div class="content">
		@if (Model?.Game != null)
		{
			<div class="visible-area">
				@{ var visibleArea = GetVisibleArea(); }
				@for (var y = 0; y < visibleArea.Height; y++)
				{
					for (var x = 0; x < visibleArea.Width; x++)
					{
						<SymbolsImageDisplay Model="GetCellImage(visibleArea.GetCell(x, y))" BackgroundColor="Color.Black"/>
					}
				}
			</div>
		}
	</div>
</div>

@code {

	[Parameter]
	public GameViewModel? Model
	{
		get => _model;
		set
		{
			UnsubscribeFromTurnEnded();
			_model = value;
			SubscribeToTurnEnded();
		}
	}

	private AreaMapFragment GetVisibleArea() => Model?.Game?.GetVisibleArea()!;

	private ISymbolsImage GetCellImage(IAreaMapCell cell)
	{
		return CellImageService.GetCellImage(cell);
	}

	private void SubscribeToTurnEnded()
	{
		if (Model?.Game != null)
		{
			Model.Game.TurnEnded += GameOnTurnEnded;
		}
	}

	private void UnsubscribeFromTurnEnded()
	{
		if (Model?.Game != null)
		{
			Model.Game.TurnEnded -= GameOnTurnEnded;
		}
	}

	private void GameOnTurnEnded(object? sender, EventArgs e)
	{
		StateHasChanged();
	}

	private GameViewModel? _model;
}
